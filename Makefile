SHELL := /bin/bash
UID := $(shell id -u)
GID := $(shell id -g)
USER := $(shell id -un)

export UID GID USER

IMAGE_NAME ?= ghcr.io/abcdotaom-thaicom/gip-dev-cpu-base
IMAGE_TAG ?= v1
FULL_IMAGE := $(IMAGE_NAME):$(IMAGE_TAG)

# ========== UTILITIES ==========

# Pre-built Docker
ghcr:
	@echo "üì¶ Pulling pre-built image from GHCR..."
	docker pull $(IMAGE_NAME)
	@echo "‚úÖ Done. Run 'make shell' to start using it."

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö container
status:
	docker compose ps -a

# ‡πÄ‡∏Ç‡πâ‡∏≤ shell ‡∏Ç‡∏≠‡∏á container ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö `up`
exec:
	docker compose exec dev bash

# ‡∏î‡∏π log ‡∏Ç‡∏≠‡∏á container ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ `up`
logs:
	docker compose logs -f --tail=100 dev

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ python, pip, uv ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
check-env:
	docker compose run --rm dev python -m pip list && docker compose run --rm dev uv pip list

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏±‡∏ô Docker ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° (permissions, GPU, etc.)
doctor:
	@echo "Checking environment..."
	@docker info >/dev/null 2>&1 && echo "‚úÖ Docker daemon is running" || echo "‚ùå Docker not running"
	@docker compose version >/dev/null 2>&1 && echo "‚úÖ Docker Compose is installed" || echo "‚ùå Missing Docker Compose"
	@nvidia-smi >/dev/null 2>&1 && echo "‚úÖ GPU detected: $$(nvidia-smi --query-gpu=name --format=csv,noheader)" || echo "‚ö†Ô∏è  No GPU detected"
	@echo "UID: $(UID), GID: $(GID), USER: $(USER)"

# ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô container ‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (build ‚Üí up ‚Üí bash)
start:
	@if ! docker compose ps -q dev | grep -q .; then \
		$(MAKE) rebuild && $(MAKE) up; \
	else \
		echo "‚öôÔ∏è  Container already running."; \
	fi
	@echo "üñ•Ô∏è  Entering shell..."
	@$(MAKE) exec

# ‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô container (up ‚Üí bash)
dev:
	@$(MAKE) up
	@echo "üîÅ Container started. Entering container shell..."
	@$(MAKE) exec

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô container ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£ (build ‚Üí up ‚Üí bash)
restart:
	@$(MAKE) rebuild
	@$(MAKE) up
	@echo "üîÅ Container started. Entering container shell..."
	@$(MAKE) exec

# ‡∏î‡∏π‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ GPU ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°
check-gpu:
	docker compose run --rm dev python -c "import tensorflow as tf; print('GPU:', tf.config.list_physical_devices('GPU'))"

# ‡∏î‡∏π‡∏Ç‡∏ô‡∏≤‡∏î disk usage ‡∏Ç‡∏≠‡∏á docker system
disk-usage:
	docker system df

# ========== COMMON TASKS ==========

# ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà container ‡πÅ‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß (‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
shell:
	docker compose run --rm dev

# ‡∏£‡∏±‡∏ô container ‡πÅ‡∏ö‡∏ö background (‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏•‡∏≠‡∏î session ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏±‡πà‡∏á down ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö server ‡∏´‡∏£‡∏∑‡∏≠  long-running dev environment ‡πÄ‡∏ä‡πà‡∏ô Jupyter, FastAPI server, ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á)
up:
	docker compose up -d

# ‡∏õ‡∏¥‡∏î container ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö background
down:
	docker compose down

# ‡∏™‡∏£‡πâ‡∏≤‡∏á image ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏°‡∏µ cache)
rebuild:
	docker compose build --no-cache --force-rm

# ‡∏õ‡∏¥‡∏î container ‡πÅ‡∏•‡∏∞‡∏•‡∏ö volume ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á (‡πÑ‡∏°‡πà‡∏•‡∏ö image)
clean:
	docker compose down --volumes --remove-orphans

# ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á ‡∏ó‡∏±‡πâ‡∏á container, image, cache
deepclean:
	docker compose down --volumes --remove-orphans
	docker image prune -f
	docker builder prune -af
